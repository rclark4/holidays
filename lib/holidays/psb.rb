# encoding: utf-8
module Holidays
  # This file is generated by the Ruby Holidays gem.
  #
  # Definitions loaded: data/psb.yaml
  #
  # To use the definitions in this file, load it right after you load the 
  # Holiday gem:
  #
  #   require 'holidays'
  #   require 'holidays/psb'
  #
  # All the definitions are available at https://github.com/alexdunae/holidays
  module PSB # :nodoc:
    def self.defined_regions
      [:psb]
    end

    def self.holidays_by_month
      {
              0 => [{:function => lambda { |year| Holidays.easter(year)-2 }, :function_id => "easter(year)-2", :type => :informal, :name => "Good Friday", :regions => [:psb]}],
      1 => [{:mday => 1, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "New Year's Day", :regions => [:psb]}],
      5 => [{:wday => 1, :week => -1, :name => "Memorial Day", :regions => [:psb]}],
      7 => [{:mday => 4, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "Independence Day", :regions => [:psb]}],
      9 => [{:wday => 1, :week => 1, :name => "Labor Day", :regions => [:psb]}],
      11 => [{:wday => 4, :week => 4, :name => "Thanksgiving", :regions => [:psb]},
            {:function => lambda { |year| Holidays.day_after_thanksgiving(year) }, :function_id => "day_after_thanksgiving(year)", :name => "Day after Thanksgiving", :regions => [:psb]}],
      12 => [{:mday => 24, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "Christmas Eve", :regions => [:psb]},
            {:mday => 25, :observed => lambda { |date| Holidays.to_weekday_if_weekend(date) }, :observed_id => "to_weekday_if_weekend", :name => "Christmas Day", :regions => [:psb]}]
      }
    end
  end

# January 20, every fourth year, following Presidential election
def self.us_inauguration_day(year)
  year % 4 == 1 ? 20 : nil
end


def self.day_after_thanksgiving(year)
  Date.civil(year,11,Date.calculate_mday(year,11,:fourth,:thursday)+1)
end



end

Holidays.merge_defs(Holidays::PSB.defined_regions, Holidays::PSB.holidays_by_month)
